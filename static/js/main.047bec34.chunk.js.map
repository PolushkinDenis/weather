{"version":3,"sources":["components/weather/Weather.jsx","components/main/Main.jsx","App.js","reportWebVitals.js","index.js"],"names":["Weather","temp","weather","getTime","time","date","Date","getHours","getMinutes","substr","className","main","name","toFixed","src","icon","sys","sunrise","sunset","Main","useState","city","setCity","setWeather","getWeather","a","fetch","api_url","json","data","TextField","id","label","variant","color","onChange","e","target","value","Button","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAkDeA,EA/CC,SAAC,GAAiB,IAEVC,EAFLC,EAAc,EAAdA,QAOTC,EAAW,SAACC,GAEd,IAAIC,EAAO,IAAIC,KAAY,IAAPF,GAQpB,OANYC,EAAKE,WAKW,KAHd,IAAMF,EAAKG,cAGiBC,QAAQ,IAItD,OACI,qBAAKC,UAAU,UAAf,UACY,OAAPR,QAAO,IAAPA,OAAA,EAAAA,EAASS,MACN,sBAAKD,UAAU,eAAf,UACI,6BACKR,EAAQU,OAEb,0EAzBIX,EA0BoBC,EAAQS,KAAKV,MAzBnCA,EAAO,QACNY,QAAQ,IAuBX,YAGA,8BACI,qBAAKC,IAAG,2CAAsCZ,EAAQA,QAAQ,GAAGa,KAAzD,eAEZ,yEACcZ,EAAQD,EAAQc,IAAIC,YAElC,mEACad,EAAQD,EAAQc,IAAIE,cAIrC,wC,gBCLDC,EA9BF,WAET,IACA,EAAwBC,qBAAxB,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA8BF,qBAA9B,mBAAOlB,EAAP,KAAgBqB,EAAhB,KAEMC,EAAU,uCAAG,8BAAAC,EAAA,sEACOC,MAAM,qDAAD,OAAsDL,EAAtD,kBALf,qCAIG,cACTM,EADS,gBAEIA,EAAQC,OAFZ,OAETC,EAFS,OAGfN,EAAWM,GAHI,2CAAH,qDAQhB,OACI,sBAAKnB,UAAU,OAAf,UACI,sBAAKA,UAAU,aAAf,UACI,cAACoB,EAAA,EAAD,CAAWC,GAAG,eAAeC,MAAM,iCAAQC,QAAQ,SAASC,MAAM,YAAYC,SAAU,SAAAC,GAAC,OAAId,EAAQc,EAAEC,OAAOC,UAC9G,cAACC,EAAA,EAAD,CAAQN,QAAQ,YAAYC,MAAM,YAAYM,QAAS,kBAAMhB,KAA7D,+CAGJ,qBAAKd,UAAU,eAAf,SAEI,cAAC,EAAD,CAASR,QAASA,UCnBnBuC,MAVf,WACE,OACE,sBAAK/B,UAAU,MAAf,UACE,4CACA,cAAC,EAAD,QCKSgC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.047bec34.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Weather.css'\r\n\r\nconst Weather = ({ weather }) => {\r\n\r\n    const getCelsion = (temp) => {\r\n        let celsion = temp - 273.15\r\n        return celsion.toFixed(0)\r\n\r\n    }\r\n    const getTime  = (time) => {\r\n        // multiplied by 1000 so that the argument is in milliseconds, not seconds.\r\n        var date = new Date(time * 1000);\r\n        // Hours part from the timestamp\r\n        var hours = date.getHours();\r\n        // Minutes part from the timestamp\r\n        var minutes = \"0\" + date.getMinutes();\r\n        \r\n        // Will display time in 10:30:23 format\r\n        var formattedTime = hours + ':' + minutes.substr(-2)\r\n        return formattedTime\r\n    }\r\n\r\n    return (\r\n        <div className=\"weather\">\r\n            {weather?.main ? (\r\n                <div className=\"weather__box\" >\r\n                    <h2>\r\n                        {weather.name}\r\n                    </h2>\r\n                    <div>\r\n                        Сейчас: {getCelsion(weather.main.temp)} ºC\r\n                    </div>\r\n                    <div>\r\n                        <img src={`http://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`}></img>\r\n                    </div>\r\n                    <div>\r\n                        Восход: { getTime(weather.sys.sunrise)}\r\n                    </div>\r\n                    <div>\r\n                        Закат: { getTime(weather.sys.sunset)}\r\n                    </div>\r\n                </div>\r\n            ) : (\r\n                <div>  </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Weather;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport './Main.css'\r\nimport Weather from '../weather/Weather'\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\n\r\nconst Main = () => {\r\n\r\n    const MY__API = \"833d126842633355dcaa4c641a86c646\"\r\n    const [city, setCity] = useState()\r\n    const [weather, setWeather] = useState()\r\n\r\n    const getWeather = async () => {\r\n        const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${MY__API}`)\r\n        const data = await api_url.json()\r\n        setWeather(data)\r\n    }\r\n    \r\n\r\n\r\n    return (\r\n        <div className=\"main\">\r\n            <div className=\"input-city\">\r\n                <TextField id=\"filled-basic\" label=\"Город\" variant=\"filled\" color=\"secondary\" onChange={e => setCity(e.target.value)} />\r\n                <Button variant=\"contained\" color=\"secondary\" onClick={() => getWeather()}>Найти</Button>\r\n            </div>\r\n           \r\n            <div className=\"main-weather\">\r\n\r\n                <Weather weather={weather} />\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import './App.css';\nimport Main from './components/main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>My Weather</h1>\n      <Main />\n \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}